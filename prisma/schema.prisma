generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ===================== ENUM =====================

enum Role {
    ADMIN
    USER
}

enum SaleType {
    RENT
    SALE
}

model BuildType {
    id         String       @id @default(uuid())
    name       String
    Additional Additional[]

    @@map("build_types")
}

// ===================== USER =====================
model User {
    id       String  @id @default(uuid())
    fullName String
    email    String  @unique
    password String
    avatar   String?

    role        Role     @default(USER)
    userDeleted Boolean? @default(false)

    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt

    ratings      Reviw[]
    properties   Property[]
    OAuthAccount OAuthAccount[]
    Favorite     Favorite[]

    @@map("users")
}

model Category {
    id         Int        @id @default(autoincrement())
    name       String
    img        String
    properties Property[]

    @@map("categories")
}

model Property {
    id          String  @id @default(uuid())
    title       String
    description String?
    price       Int
    discount    Float?  @default(0)

    features Json?

    locationUrl String
    address     String

    status SaleType @default(RENT)
    isSale Boolean  @default(false) // isActive sales   

    ownerId String
    owner   User   @relation(fields: [ownerId], references: [id])

    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id])

    additionals   Additional[]
    ratings       Reviw[]
    PropertyMedia PropertyMedia[]
    Favorite      Favorite[]

    @@map("properties")
}

// id → Unikal ID.

// propertyId → Qaysi uyning qo‘shimcha ma’lumoti ekanini ko‘rsatadi (foreign key).

// label → Uyni qisqa ta’riflash uchun belgi, masalan: “Luxury Villa” yoki “Office Room”.

// material → Qurilish materiali (beton, g‘isht, yog‘och).

// rooms → Umumiy xonalar soni.

// beds → Yotoq xonalar soni.

// baths → Hammomlar soni.

// garages → Garajlar soni.

// year_build → Qurilgan yil.

// homeArea → Uy ichki maydoni (kv.m).

// lotDimensions → Uchastka o‘lchami (masalan, “20x40”).

// lotArea → Umumiy yer maydoni (kv.m).  Property Siza

model Additional {
    id         String   @id @default(uuid()) //
    propertyId String // Property Id
    property   Property @relation(fields: [propertyId], references: [id])

    label    String
    material String

    rooms Int
    beds  Int // ["label","material","roms","beds","beaths","garages","year-build","home area","lot dimensions","lot area"]
    baths Int

    garages    Int
    garageSize Float

    year_build Int

    homeArea      Int
    lotDimensions String // e.g. "20x40"
    lotArea       Int

    buildType   BuildType @relation(fields: [buildTypeId], references: [id])
    buildTypeId String

    @@map("Additional")
}

model PropertyMedia {
    id          String   @id @default(uuid())
    features    Json
    gallery     Json
    attachments Json
    property    Property @relation(fields: [propertyId], references: [id])
    propertyId  String

    @@map("property_files")
}

model Favorite {
    id         String @id @default(uuid())
    userId     String
    propertyId String

    user     User     @relation(fields: [userId], references: [id])
    property Property @relation(fields: [propertyId], references: [id])
}

model Reviw {
    id         String  @id @default(uuid())
    userId     String
    propertyId String
    comment    String?

    Cleanliness   Float
    Communication Float
    Check_in      Float
    Accuracy      Float
    Location      Float
    Value         Float

    user     User     @relation(fields: [userId], references: [id])
    property Property @relation(fields: [propertyId], references: [id])

    createdAt DateTime @default(now())

    @@map("reviw")
}

model Contact {
    id        String   @id @default(uuid())
    phone     String
    email     String
    task      String
    message   String
    fromId    String?
    toId      String
    createdAt DateTime @default(now())

    @@map("contact")
}

model Tour {
    id      String @id @default(uuid())
    name    String
    phone   String
    email   String
    message String
    toId    String

    createdAt DateTime @default(now())

    @@map("tours")
}

// ===================== OAUTH =====================
model OAuthAccount {
    id                String @id @default(uuid())
    provider          String
    providerAccountId String
    userId            String

    user User @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
    @@map("oauth_accounts")
}
